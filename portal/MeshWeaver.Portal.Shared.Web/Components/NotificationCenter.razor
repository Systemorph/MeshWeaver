@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@implements IDisposable
@inject IDialogService DialogService
@inject IMessageService MessageService

<FluentButton BackgroundColor="transparent" OnClick="OpenNotificationCenterAsync" Title="Notification center">
    @if (MessageService.Count(App.MessagesNotificationCenter) > 0)
{
        <FluentCounterBadge Count="@MessageService.Count(App.MessagesNotificationCenter)"
                        Max="9"
                        ShowOverflow="true"
                        BackgroundColor="@Color.Error"
                        Color="Color.Fill"
                        Appearance="Appearance.Accent">
        <ChildContent>
            @NotificationIcon()
        </ChildContent>
    </FluentCounterBadge>
}
else
{
    @NotificationIcon() 
}
</FluentButton>

@code {
    private IDialogReference? Dialog;
   
    protected override void OnInitialized()
    {
        MessageService.OnMessageItemsUpdated += UpdateCount;    
    }

    private void UpdateCount()
    {
        InvokeAsync(StateHasChanged);
    }

    private RenderFragment NotificationIcon() =>
        @<FluentIcon Value="@(new Size20.Alert())" Color="Color.Neutral"  Title="Notification center" />;

    private async Task OpenNotificationCenterAsync()
    {

        Dialog = await DialogService.ShowPanelAsync<NotificationCenterPanel>(new DialogParameters<GlobalState>()
            {
                Alignment = HorizontalAlignment.Right,
                Title = $"Notifications",
                PrimaryAction = null,
                SecondaryAction = null,
                ShowDismiss = true
            });
        DialogResult result = await Dialog.Result;
        HandlePanel(result);
    }

    private static void HandlePanel(DialogResult result)
    {
    }

    public void Dispose()
    {
        MessageService.OnMessageItemsUpdated -= UpdateCount;
    }

}
