using MeshWeaver.AI.Persistence;
using MeshWeaver.Layout;
using Microsoft.Extensions.AI;

namespace MeshWeaver.AI;

public interface IAgentChat
{
    void SetContext(AgentContext applicationContext);
    Task ResumeAsync(ChatConversation conversation);

    /// <summary>Sends chat messages and returns the response.</summary>
    /// <param name="messages">The sequence of chat messages to send.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="messages"/> is <see langword="null"/>.</exception>
    /// <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#request-a-chat-response">Request a chat response.</related>
    IAsyncEnumerable<ChatMessage> GetResponseAsync(
        IReadOnlyCollection<ChatMessage> messages,
        CancellationToken cancellationToken = default);

    /// <summary>Sends chat messages and streams the response.</summary>
    /// <param name="messages">The sequence of chat messages to send.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="messages"/> is <see langword="null"/>.</exception>
    /// <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#request-a-streaming-chat-response">Request a streaming chat response.</related>
    IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(
        IReadOnlyCollection<ChatMessage> messages,
        CancellationToken cancellationToken = default);

    /// <summary>Delegates a task to another agent.</summary>
    /// <param name="agentName">The name of the agent to delegate to</param>
    /// <param name="message">The message or task to send to the agent</param>
    /// <param name="askUserFeedback">Whether to ask for user feedback before proceeding</param>
    /// <returns>A task that represents the delegation operation</returns>
    string Delegate(string agentName, string message, bool askUserFeedback = false);

    /// <summary>Displays a layout area in the chat as a visual component.</summary>
    /// <param name="layoutAreaControl">The layout area control</param>
    void DisplayLayoutArea(LayoutAreaControl layoutAreaControl);

    AgentContext? Context { get; }
}
