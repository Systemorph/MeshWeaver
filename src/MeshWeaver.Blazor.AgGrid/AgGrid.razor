@using Microsoft.JSInterop
@inherits BlazorView<GridControl, AgGrid>

<HeadContent>
    <link href="https://cdn.jsdelivr.net/npm/ag-grid-community@31.3.2/styles/ag-grid.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/ag-grid-community@31.3.2/styles/ag-theme-alpine.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/ag-grid-community@31.3.2/styles/ag-theme-alpine-dark.min.css" rel="stylesheet" />
</HeadContent>


<div @ref="Element" class="ag-grid-container @(IsDarkMode ? "ag-theme-alpine-dark" : "ag-theme-alpine")"
     style="height: 500px; width: 100%;" data-grid-id="@id"></div>

@code
{
    ElementReference Element;
    private bool IsDarkMode => false;
    private IJSObjectReference JSModule;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize JS module and setup system theme detection
            JSModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./_content/MeshWeaver.Blazor.AgGrid/AgGrid.razor.js");

            string licenseKey = Environment.GetEnvironmentVariable("AG_GRID_LICENSE_KEY");
            if (!string.IsNullOrEmpty(licenseKey))
            {
                await JSModule.InvokeVoidAsync("setLicenseKey", licenseKey);
            }

        }

        if (JSModule is not null && Options is not null)
        {
            await JSModule.InvokeVoidAsync("renderGrid", id, Element, Options, IsDarkMode);
        }

        // Check if the theme mode has changed
        if (!firstRender)
        {
            if (JSModule is not null)
            {
                await JSModule.InvokeVoidAsync("updateTheme", id, IsDarkMode);
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        StateHasChanged();
    }

    protected override void BindData()
    {
        base.BindData();
        DataBind(ViewModel.Data, o => o.Options);
    }

    private readonly string id = Guid.NewGuid().ToString();

    private object Options { get; set; }


    public override async ValueTask DisposeAsync()
    {
        try
        {
            // Cleanup theme detection listeners
            if (JSModule is not null)
            {
                await JSModule.InvokeVoidAsync("disposeGrid", id);
                await JSModule.DisposeAsync();
            }

        }
        catch (JSDisconnectedException)
        {
            // Ignore disconnect exceptions during disposal
        }
    }
}