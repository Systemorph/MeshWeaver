@page "/chat"
@using MeshWeaver.AI
@using MeshWeaver.Messaging
@implements IDisposable
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@inject IMessageHub Hub;

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
    <NoMessagesContent>
        <div>You can ask me questions about your pricing or submit documents such as risk profiles or claims.</div>
    </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
</div>

@code {
    private string SelectedModel => "o3-mini";
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource currentResponseCancellation;
    private ChatMessage currentResponseMessage;
    private ChatInput chatInput;
    private string SystemPrompt => ChatService.SystemPrompt;

    protected override void OnInitialized()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
    }
      // Public method to allow parent components to reset the conversation
    public async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        if (chatInput != null)
        {
            await chatInput.FocusAsync();
        }
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();
        var chatClient = ChatService.Get(SelectedModel);
        var chatOptions = ChatService.GetOptions(Hub, NavigationManager.ToBaseRelativePath(NavigationManager.Uri), SelectedModel);
        await foreach (var update in chatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
        {
            messages.AddMessages(update, filter: c => c is not TextContent);
            responseText.Text += update.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
            StateHasChanged();
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
