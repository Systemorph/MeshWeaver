@using MeshWeaver.ContentCollections
@inherits BlazorView<MeshWeaver.ContentCollections.ArticleCatalogItemControl, ArticleCatalogItemView>

<a href="@Data.Url" class="article-card-link">
    <article class="article-card">
        <FluentStack Orientation="Orientation.Vertical">
            <div class="header">
                <div class="author-info">
                    @foreach (var author in Data.AuthorDetails)
                    {
                        <div class="author">
                            <FluentPersona Name="@author.FormatName()" ImageSize="24px" Image="@author.ImageUrl"/>
                        </div>
                    }
                </div>
                <div class="publish-info">
                    <span class="publish-date">@PublishedDate</span>
                    @if (IsNewArticle)
                    {
                        <span class="new-indicator"></span>
                    }
                </div>
            </div>
            <FluentStack Orientation="Orientation.Horizontal">
                <div class="content">
                    <div class="text">
                        <h3 class="title">@Data.Title</h3>
                        <p class="summary">@Data.Abstract</p>
                        @if (HasVideo)
                        {
                            <div class="video-info">
                                <FluentIcon Title="Video" Value="@(new Icons.Filled.Size20.Video())"/>
                                <span>@VideoDuration</span>
                            </div>
                        }
                    </div>
                    <div class="thumbnail">
                        <img alt="@Data.Title" src="@Thumbnail" width="160" height="160"/>
                    </div>
                </div>
            </FluentStack>
        </FluentStack>
    </article>
</a>

@code
{
    private Article Data { get; set; }
    private string PublishedDate => Data.Published is null 
        ? "unpublished" 
        : Data.Published.Value.Year == DateTime.Now.Year 
            ? Data.Published.Value.ToString("dd MMM") 
            : Data.Published.Value.ToString("dd MMM yyyy");
    private bool IsNewArticle => Data.Published is not null && (DateTime.Now - Data.Published.Value).TotalDays <= 7;
    private bool HasVideo => !string.IsNullOrEmpty(Data.VideoUrl);
    private string VideoDuration => Data.VideoDuration.ToString(@"hh\:mm\:ss");

    private string ImageBasePath => $"static/{Data.Collection}";
    private string Avatar => $"{ImageBasePath}/avatars/{Data.AuthorAvatar}";
    private string Thumbnail => $"{ImageBasePath}/{Data.Thumbnail}";

    protected override void BindData()
    {
        base.BindData();

        if (ViewModel != null)
        {
            DataBind(ViewModel.Article, x => x.Data);
        }
    }
}