@using System.Collections
@using MeshWeaver.Articles
@using MeshWeaver.Blazor.Infrastructure
@using Microsoft.DotNet.Interactive.Formatting

@inherits BlazorView<ArticleControl, ArticleView>

<PageTitle>@Title</PageTitle>

<div class="article-container">
    <div class="article-header">
        <div class="header-content">
            <div class="meta-info">
                <div class="author-info">
                    @foreach (var author in Authors)
                    {
                        <div class="author">
                            <FluentPersona Name="@author.FormatName()" ImageSize="24px" Image="@author.ImageUrl"/>
                        </div>
                    }
                </div>
                <span class="published-date">@Published.ToString("MMMM dd, yyyy")</span>
            </div>
            <h1 class="title">@Title</h1>
            <p class="abstract">@Abstract</p>
        </div>
        <div class="media">
            @if (!string.IsNullOrEmpty(VideoUrl))
            {
                <div class="video">                
                    <iframe class="youtube-embed"
                                                           src="@GetEmbedUrl(VideoUrl)"
                                                           title="YouTube video player"
                                                           loading="lazy"
                                                           allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                                           allowfullscreen>
                    </iframe>
                </div>

            }
            else
            {
                <img class="thumbnail" src="@ThumbnailPath" alt="Article Thumbnail" />
            }
        </div>
    </div>

</div>
<div class="article-content markdown-body">
    <MarkdownView ViewModel="@MarkdownControl" />
</div>

@code {
    private string Name;
    private string Collection;
    private string Title;
    private IReadOnlyCollection<string> Tags;
    private string Thumbnail;
    private string Abstract;
    private IReadOnlyCollection<Author> Authors;
    private DateTime Published;
    private DateTime LastUpdated;
    private string Html;
    private string VideoUrl;
    private MarkdownControl MarkdownControl;
    private string ThumbnailPath => $"/static/{Collection}/{Thumbnail}";

    protected override void BindData()
    {
        base.BindData();
        DataBind(ViewModel.Name, x => x.Name);
        DataBind(ViewModel.Collection, x => x.Collection);
        DataBind(ViewModel.Title, x => x.Title);
        DataBind(ViewModel.Tags, x => x.Tags, ConvertStringArray);
        DataBind(ViewModel.Thumbnail, x => x.Thumbnail);
        DataBind(ViewModel.Abstract, x => x.Abstract);
        DataBind(ViewModel.Authors, x => x.Authors, ConvertAuthorsArray);
        DataBind(ViewModel.Published, x => x.Published);
        DataBind(ViewModel.LastUpdated, x => x.LastUpdated);
        DataBind(ViewModel.Html, x => x.Html);
        DataBind(ViewModel.VideoUrl, x => x.VideoUrl);
        MarkdownControl = new(null) { Html = Html };
    }

    private IReadOnlyCollection<string> ConvertStringArray(object tags)
        => (tags as IEnumerable)?.Cast<string>().ToArray();
    private IReadOnlyCollection<Author> ConvertAuthorsArray(object tags)
        => (tags as IEnumerable)?.Cast<Author>().ToArray();

    private string GetEmbedUrl(string videoUrl)
    {
        if (videoUrl.Contains("youtube.com/watch"))
        {
            var videoId = videoUrl.Split("v=")[1];
            var ampersandPosition = videoId.IndexOf('&');
            if (ampersandPosition != -1)
            {
                videoId = videoId.Substring(0, ampersandPosition);
            }
            return $"https://www.youtube.com/embed/{videoId}";
        }
        return videoUrl;
    }


}