@using System.Collections
@using HtmlAgilityPack
@using MeshWeaver.Kernel
@using MeshWeaver.Mesh
@using MeshWeaver.Messaging
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.JSInterop

@inherits BlazorView<ArticleControl, ArticleView>


<div class="article-header">
    <div class="header-content">
        <h1>@Title</h1>
        <div class="meta-info">
            <span class="authors">@string.Join(", ", Authors)</span>
            <span class="published-date">@Published.ToString("MMMM dd, yyyy")</span>
            <span class="tags">
                @foreach (var tag in Tags)
                {
                    <span class="tag">@tag</span>
                }
            </span>
        </div>
        <p class="abstract">@Abstract</p>
    </div>
    <div class="thumbnail">
        <img src="@ThumbnailPath" alt="Article Thumbnail" />
    </div>
</div>

<MarkdownComponent Html="@Content" Hub="@Hub" /> 
@code {
    private string Name;
    private string Collection;
    private string Title;
    private IReadOnlyCollection<string> Tags;
    private string Thumbnail;
    private string Abstract;
    private IReadOnlyCollection<string> Authors;
    private DateTime Published;
    private DateTime LastUpdated;
    private string Content;

    private string ThumbnailPath => $"/static/{Collection}/{Thumbnail}";
    protected override void BindData()
    {
        base.BindData();
        DataBind(ViewModel.Name, x => x.Name);
        DataBind(ViewModel.Collection, x => x.Collection);
        DataBind(ViewModel.Title, x => x.Title);
        DataBind(ViewModel.Tags, x => x.Tags, ConvertStringArray);
        DataBind(ViewModel.Thumbnail, x => x.Thumbnail);
        DataBind(ViewModel.Abstract, x => x.Abstract);
        DataBind(ViewModel.Authors, x => x.Authors, ConvertStringArray);
        DataBind(ViewModel.Published, x => x.Published);
        DataBind(ViewModel.LastUpdated, x => x.LastUpdated);
        DataBind(ViewModel.Content, x => x.Content);
    }

    private IReadOnlyCollection<string> ConvertStringArray(object tags)
        => (tags as IEnumerable)?.Cast<string>().ToArray();



}
