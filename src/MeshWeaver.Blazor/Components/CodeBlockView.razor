@using MeshWeaver.Kernel
@using MeshWeaver.Mesh
@using Microsoft.JSInterop
@inherits BlazorView<CodeBlockControl, CodeBlockView>
@inject IJSRuntime JsRuntime;


@if (!HideCode)
{
    <div class="code-content">
        @((MarkupString)CodeHtml)
    </div>
}

@if (Language == "mermaid")
{
    <div class='mermaid'>@Code</div>
}

@if (OutputArea is not null)
{
    <LayoutAreaView ViewModel="@OutputArea" Stream="@Stream" Area="@ExecutionArea"></LayoutAreaView>
}


@code {
    private string Code;
    private string Language;
    private bool HideCode;
    private bool HideOutput;
    private bool ShowHeader;
    private string ExecutionArea;
    private string CodeHtml;
    private string MarkdownArguments;
    private LayoutAreaControl OutputArea;

    protected override void BindData()
    {
        base.BindData();
        DataBind(ViewModel.Code, x => x.Code);
        DataBind(ViewModel.Language, x => x.Language);
        DataBind(ViewModel.OutputHidden, x => x.HideOutput);
        DataBind(ViewModel.CodeHidden, x => x.HideCode);
        DataBind(ViewModel.ExecutionArea, x => x.ExecutionArea);
        DataBind(ViewModel.HeaderShown, x => x.ShowHeader);
        DataBind(ViewModel.Html, x => x.CodeHtml);
        DataBind(ViewModel.MarkdownArguments, x => x.MarkdownArguments);

        if (Language == "csharp" && !string.IsNullOrEmpty(ExecutionArea) && Stream is not null)
        {
            var kernel = Stream.Get<KernelAddress>();
            if (kernel is null)
            {
                kernel = new KernelAddress();
                Stream.Set(kernel);
            }

            Hub.Post(new SubmitCodeRequest(Code) { ViewId = ExecutionArea });
            if (!HideOutput)
                OutputArea = new(kernel, new(ExecutionArea));
        }

    }

    private string CreateMermaid(string content)
    {
        return $"<div class='mermaid'>{content}</div>";
    }

    private async Task CopyToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Code);
    }

}
