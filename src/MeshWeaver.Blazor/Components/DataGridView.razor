@using System.Text.Json.Nodes
@using MeshWeaver.Layout.DataGrid
@inherits BlazorView<DataGridControl, DataGridView>

<div style="display: table; table-layout: fixed; width: 100%;" class="@Class">
    <div style="overflow-x: auto;">
        <FluentDataGrid Items="@QueryableData"
                        Virtualize="@virtualize"
                        ItemSize="@itemSize"
                        ResizableColumns="@resizableColumns"
                        GenerateHeader="@GetGenerateHeaderOption()"
                        GridTemplateColumns="@gridTemplateColumns"
                        Loading="@loading"
                        ShowHover="@showHover"
                        Pagination="@Pagination"
                        AutoFit="@autoFit"
                        AutoFocus="@autoFocus"
                        Class="@Class"
                        AutoItemsPerPage="@autoItemsPerPage"
                        OnCellClick="@OnCellClick"
                        Style="@Style">
            @foreach (var column in ViewModel.Columns)
            {
                if(column is PropertyColumnControl propertyColumn)
                {
                    @((RenderFragment)(builder => RenderPropertyColumn(builder, propertyColumn)))
                }
                else if(column is TemplateColumnControl templateColumn)
                {
                    <TemplateColumn TGridItem="JsonObject" 
                                    Title="@GetTemplateColumnTitle(templateColumn)"
                                    Width="@GetTemplateColumnWidth(templateColumn)"
                                    Align="@GetTemplateColumnAlign(templateColumn)">
                        <CascadingValue Name="Context" Value="@context">
                            <DispatchView ViewModel="@templateColumn.Template" Stream="@Stream" Area="@Area"></DispatchView>
                        </CascadingValue>
                    </TemplateColumn>
                }
                else
                {
                    throw new NotImplementedException($"Column type {column.GetType().Name} is not supported.");
                }
            }
        </FluentDataGrid>
    </div>
</div>

<div class="paginator">
    @if (Pagination.TotalItemCount.HasValue && (Pagination.TotalItemCount > Pagination.ItemsPerPage || showPageSizeSelector))
    {
        <div style="display: flex; align-items: center; justify-content: space-between; gap: 1rem;">   
			@if (showPageSizeSelector)
			{
				<div style="display: flex; align-items: center; gap: 0.5rem;">
					<FluentLabel>Items per page:</FluentLabel>
					<FluentSelect TOption="string"
									Value="@itemsPerPage.ToString()"
									ValueChanged="@(async (string value) => await OnPageSizeChanged(int.Parse(value)))"
									Width="80px">
						@foreach (var size in pageSizeOptions)
						{
							<FluentOption TOption="string" Value="@size.ToString()">@size</FluentOption>
						}
					</FluentSelect>
				</div>
			}
			<FluentPaginator State="@Pagination" />
		</div>
    }
</div>


