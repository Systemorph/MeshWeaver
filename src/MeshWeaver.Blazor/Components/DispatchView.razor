@using Microsoft.Extensions.DependencyInjection
@using static Microsoft.Extensions.Logging.LoggerExtensions;
@using MeshWeaver.Layout.Client
@using MeshWeaver.Messaging
@inherits BlazorView<UiControl, DispatchView>

@if(ViewDescriptor != null)
{
    <CascadingValue Value=@ViewModelDataContext Name="DataContext">
        @((RenderFragment)(builder =>
        {
            builder.OpenComponent(0, ViewDescriptor.Type);
            var index = 0;

            foreach (var parameter in ViewDescriptor.Parameters)
            {
                builder.AddAttribute(++index, parameter.Key, parameter.Value);
            }

            builder.CloseComponent();
        }))
    </CascadingValue>
}

@code
{
    private ViewDescriptor ViewDescriptor { get; set; }
    private string ViewModelDataContext { get; set; }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        var client = Hub.ServiceProvider.GetRequiredService<ILayoutClient>();
        ViewDescriptor = client.GetViewDescriptor(ViewModel, Stream, Area);
        ViewModelDataContext = ViewModel?.DataContext  != null 
            ? WorkspaceReference.Decode(ViewModel.DataContext).ToString() 
            : DataContext;
        Logger.LogDebug($"Rendering Area {Area} to View {ViewDescriptor?.Type.Name}");
    }
}