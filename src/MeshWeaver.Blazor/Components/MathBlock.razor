@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime

@if (Name == "div")
{
    <div class="math" @ref="MathBlockElement" @attributes="AdditionalAttributes">
        @((MarkupString)Html)
    </div>
}
@if (Name == "span")
{
    <span class="math" @ref="MathBlockElement" @attributes="AdditionalAttributes">
        @((MarkupString)Html)
    </span>
}

@code {
    [Parameter] public string Name { get; set; }
    [Parameter] public string Html { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }
    private IJSObjectReference jsModule;
    private ElementReference MathBlockElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            jsModule ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/MeshWeaver.Blazor/Components/MathBlock.razor.js");

            if (jsModule is not null)
            {
                await jsModule.InvokeAsync<bool>("loadAndTypeset", MathBlockElement);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering MathJax: {ex.Message}");
        }
    }
}