@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@implements IDisposable

<FluentDesignTheme StorageName="theme" @bind-Mode="InternalMode" />

@code {
    [Parameter]
    public DesignThemeModes Mode { get; set; }

    [Parameter]
    public EventCallback<DesignThemeModes> ModeChanged { get; set; }


    // Internal property to manage the two-way binding with FluentDesignTheme
    private DesignThemeModes InternalMode
    {
        get => Mode;
        set
        {
            if (Mode != value)
            {
                Mode = value;
                ModeChanged.InvokeAsync(value);
                InvokeAsync(StateHasChanged);
            }
        }
    }


    private DesignThemeModes LastMode = DesignThemeModes.System;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (LastMode != Mode)
        {
            LastMode = Mode;
            await JSRuntime.InvokeVoidAsync("initializeThemeFromBlazor", (int)Mode);
            Console.WriteLine($"Theme synchronized to JS: {Mode}");

        }
    }


    public void Dispose()
    {
        // Clean up any resources if needed
    }
}