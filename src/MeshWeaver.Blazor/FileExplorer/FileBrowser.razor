@using MeshWeaver.ContentCollections
@using HorizontalAlignment = Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment


<div class="file-browser">
    <!-- Toolbar with Separate Row for Breadcrumb Navigation -->
    <FluentToolbar Class="toolbar">
        @if (Collection != null)
        {
            <div class="toolbar-row">
                <FluentBreadcrumb>
                    @{
                        var accumulatedPath = Embed ? "/" : "/collections/" + @Collection.Collection;
                            if (Embed)
                            {
                                var topPath = Path.Combine(accumulatedPath, TopLevelPath);
                                <FluentBreadcrumbItem @onclick="@(() => ChangePath(topPath))" class="breadcrumb-clickable">@Root</FluentBreadcrumbItem>
                            }
                            else
                            {
                                <FluentBreadcrumbItem Href="@accumulatedPath">@Root</FluentBreadcrumbItem>
                            }

                        @foreach (var folder in CurrentPath.Split('/').Where(p => !string.IsNullOrEmpty(p)))
                        {
                            accumulatedPath += '/' + folder;
                            if (accumulatedPath.TrimStart('/').Length > (TopLevelPath.TrimStart('/').Length))
                            {
                                if (Embed)
                                {
                                    var path = accumulatedPath;
                                    <FluentBreadcrumbItem @onclick="@(() => ChangePath(path))" class="breadcrumb-clickable">@Path.GetFileName(folder)</FluentBreadcrumbItem>
                                }
                                else
                                {
                                    <FluentBreadcrumbItem Href="@accumulatedPath">@Path.GetFileName(folder)</FluentBreadcrumbItem>
                                }
                            }

                        }
                    }
                </FluentBreadcrumb>
            </div>
        }
        <div class="toolbar-row">
            @if (ShowCollectionSelection)
            {
                <CollectionPicker CollectionChanged="CollectionChanged"></CollectionPicker>
            }
            <FluentSpacer></FluentSpacer>
            @if (Collection is not null)
            {
                <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" Text="Add Folder" OnClick="AddFolderAsync">New Folder</FluentButton>
                <FluentButton IconStart="@(new Icons.Regular.Size20.BinRecycle())" Text="Delete" Disabled="@(!SelectedItems.Any())" OnClick="DeleteAsync">Delete</FluentButton>
                <FluentButton IconStart="@(new Icons.Regular.Size20.ArrowUpload())" Text="Upload" Id="MyUploadStream">Upload</FluentButton>
                if (ShowNewArticle)
                {
                    <FluentButton IconStart="@(new Icons.Regular.Size20.New())" Text="New Article" OnClick="NewArticleAsync">New Article</FluentButton>
                }
            }
        </div>
    </FluentToolbar>
    <FluentInputFile @ref="@myFileByStream"
                     AnchorId="MyUploadStream"
                     DragDropZoneVisible="false"
                     Mode="InputFileMode.Stream"
                     Multiple="true"
                     MaximumFileSize="@(20 * 1024 * 1024)"
                     ProgressPercentChanged="@(p => progressPercent = p)"
                     OnFileUploaded="@OnFileUploadedAsync"
                     OnCompleted="@OnCompleted" />

    <FluentProgress Min="0" Max="100" Value="@progressPercent" Visible="@(progressPercent > 0)" />
    <FluentLabel Alignment="HorizontalAlignment.Center">
        @progressTitle
    </FluentLabel>
    
    <!-- Combined DataGrid for Folders and Files -->
    <FluentDataGrid Items="@CollectionItems.AsQueryable()"
                    TGridItem="CollectionItem"
                    ShowHover="true"
                    ResizableColumns="true">
        <SelectColumn TGridItem="CollectionItem"
                      SelectMode="DataGridSelectMode.Multiple"
                      SelectFromEntireRow="false"
                      @bind-SelectedItems="SelectedItems"/>
        <TemplateColumn TGridItem="CollectionItem" Title="Name">
            <div class="grid-item">
                @if (context is FolderItem folder)
                {
                    @if (Embed)
                    {
                        <a href="javascript:void(0)" @onclick="() => ChangePath(folder.Path)" class="file-browser-link">
                            <FluentIcon Value="@(new Icons.Filled.Size20.Folder())"/>
                            <span>@context.Name</span>
                        </a>
                    }
                    else
                    {
                        <a href="@GetLink(context)" class="file-browser-link">
                            <FluentIcon Value="@(new Icons.Filled.Size20.Folder())"/>
                            <span>@context.Name</span>
                        </a>
                    }
                }
                else
                {
                    <a href="@GetLink(context)" class="file-browser-link">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Document())"/>
                        <span>@context.Name</span>
                    </a>
                }
             </div>
        </TemplateColumn>
        <TemplateColumn TGridItem="CollectionItem" Title="Details">
            @if (context is FolderItem folder)
            {
                <span>@folder.ItemCount items</span>
            }
            else if (context is FileItem file)
            {
                <span>Modified: @file.LastModified.ToString("yyyy-MM-dd HH:mm")</span>
            }
        </TemplateColumn>
    </FluentDataGrid>
 </div>