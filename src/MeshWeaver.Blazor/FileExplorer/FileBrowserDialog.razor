@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.FluentUI.AspNetCore.Components
@using Appearance = Microsoft.FluentUI.AspNetCore.Components.Appearance
@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation

@implements IDialogContentComponent

        <FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
            @if (ShowStorageAccountSelector)
            {
                <!-- Storage Account Selection -->
                <FluentSelect Label="Storage Account" 
                            Value="@selectedStorageAccount"
                            Items="@storageAccounts"
                            OptionText="@(a => a.Text)" 
                            OptionValue="@(a => a.Value)"
                            ValueChanged="OnStorageAccountChanged"/>
            }
            
            @if (!string.IsNullOrEmpty(selectedStorageAccount))
            {
                <FileBrowser 
                    CollectionName="@selectedStorageAccount"
                    CurrentPath="@currentPath"
                    Folders="@folders"
                    Files="@files"
                    OnFolderNavigationRequested="NavigateToFolder"
                    OnFileSelected="SelectFile"
                    OnCreateFolderRequested="ShowCreateFolderDialog"
                    OnFileUploadRequested="HandleFileUpload" />
            }
            <FluentButton Appearance="Appearance.Accent" @onclick="SaveChanges">@SaveButtonText</FluentButton>
            <FluentButton Appearance="Appearance.Neutral" @onclick="CancelChanges">Cancel</FluentButton>
        </FluentStack>

<!-- Create Folder Dialog -->

@code {
    private FluentDialog dialogReference;
    
    [Parameter] public string Title { get; set; } = "File Browser";
    [Parameter] public string SaveButtonText { get; set; } = "Save";
    [Parameter] public bool ShowStorageAccountSelector { get; set; } = true;
    [Parameter] public EventCallback<FileBrowserResult> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    
    private List<SelectOption> storageAccounts = new();
    private string selectedStorageAccount;
    private string currentPath = "/";
    private List<string> folders = new();
    private List<string> files = new();
    private string selectedFile;
    
    public class SelectOption
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
    
    public class FileBrowserResult
    {
        public string StorageAccount { get; set; }
        public string Path { get; set; }
        public string SelectedFile { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        // Load storage accounts (this would be replaced with your actual implementation)
        storageAccounts = await GetStorageAccountsAsync();
        
        if (storageAccounts.Any())
        {
            selectedStorageAccount = storageAccounts.First().Value;
            await LoadFolderContentsAsync();
        }
    }
    
    private async Task<List<SelectOption>> GetStorageAccountsAsync()
    {
        // TODO: Replace with actual storage account retrieval logic
        return new List<SelectOption>
        {
            new() { Text = "Articles Storage", Value = "articles-storage" },
            new() { Text = "News Storage", Value = "news-storage" },
            new() { Text = "Blog Storage", Value = "blog-storage" }
        };
    }
    
    private async Task OnStorageAccountChanged(string value)
    {
        selectedStorageAccount = value;
        currentPath = "/";
        await LoadFolderContentsAsync();
    }
    
    private async Task NavigateToFolder(string path)
    {
        currentPath = path;
        await LoadFolderContentsAsync();
    }
    
    private async Task LoadFolderContentsAsync()
    {
        // TODO: Replace with actual folder content loading logic
        // This would call your storage service to get folders and files
        
        // Simulated folder content for demonstration
        folders = new List<string> { "images", "documents", "templates" };
        files = new List<string> { "readme.md", "article.json" };
    }
    
    private void SelectFile(string fileName)
    {
        selectedFile = fileName;
    }
    
    
    
    
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        // TODO: Implement file upload logic
        // Upload files to the current folder in the storage account
        foreach (var file in e.GetMultipleFiles())
        {
            // Process file upload
            files.Add(file.Name);
        }
    }
    
    private async Task SaveChanges()
    {
        var result = new FileBrowserResult
        {
            StorageAccount = selectedStorageAccount,
            Path = currentPath,
            SelectedFile = selectedFile
        };
        
        await OnSave.InvokeAsync(result);
        dialogReference.Hide();
    }
    
    private async Task CancelChanges()
    {
        await OnCancel.InvokeAsync();
        dialogReference.Hide();
    }
    
    public void ShowDialog()
    {
        dialogReference.Show();
    }
    
    public void HideDialog()
    {
        dialogReference.Hide();
    }
}