// <auto-generated />
using System;
using System.Collections.Generic;
using MeshWeaver.Articles;
using MeshWeaver.Hosting.PostgreSql;
using MeshWeaver.Kernel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeshWeaver.Hosting.PostgreSql.Migrations
{
    [DbContext(typeof(MeshWeaverDbContext))]
    [Migration("20250314101834_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeshWeaver.Articles.Article", b =>
                {
                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("Abstract")
                        .HasColumnType("text");

                    b.Property<string>("AuthorAvatar")
                        .HasColumnType("text");

                    b.Property<IReadOnlyCollection<Author>>("AuthorDetails")
                        .HasColumnType("jsonb");

                    b.Property<string>("Authors")
                        .HasColumnType("text");

                    b.Property<IReadOnlyList<SubmitCodeRequest>>("CodeSubmissions")
                        .HasColumnType("jsonb");

                    b.Property<string>("Collection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Comments")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("IconId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Pinned")
                        .HasColumnType("boolean");

                    b.Property<string>("PrerenderedHtml")
                        .HasColumnType("text");

                    b.Property<DateTime>("Published")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<ValueTuple<ArticleStatus, DateTime>[]>("StatusHistory")
                        .HasColumnType("jsonb");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.PrimitiveCollection<float[]>("VectorRepresentation")
                        .HasColumnType("real[]");

                    b.Property<TimeSpan>("VideoDuration")
                        .HasColumnType("interval");

                    b.Property<string>("VideoTagLine")
                        .HasColumnType("text");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("text");

                    b.Property<string>("VideoTranscript")
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Url");

                    b.HasIndex("IconId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("MeshWeaver.Articles.Author", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.HasKey("FirstName", "LastName");

                    b.HasIndex("FirstName", "LastName")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MeshWeaver.Domain.Icon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("Variant")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Icon");
                });

            modelBuilder.Entity("MeshWeaver.Mesh.MeshNode", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssemblyLocation")
                        .HasColumnType("text");

                    b.Property<int>("InstantiationType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<int>("RoutingType")
                        .HasColumnType("integer");

                    b.Property<string>("StartupScript")
                        .HasColumnType("text");

                    b.Property<string>("StreamProvider")
                        .HasColumnType("text");

                    b.Property<string>("ThumbNail")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("MeshNodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("MeshWeaver.Articles.Article", b =>
                {
                    b.HasOne("MeshWeaver.Domain.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.Navigation("Icon");
                });
#pragma warning restore 612, 618
        }
    }
}
